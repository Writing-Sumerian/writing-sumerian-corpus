start       : _break? ( line | paren | _part ) ( _sep ( line | paren | _part ) )* _break?
line        : "[" _part ( _sep _part )* "]"
paren       : "(" _part ( _sep _part )* ")"
//word        : _part ( _con _part )*

_part       : ( lindicator _nullsep? )* char ( _nullsep? rindicator )* 
            | indicator+
lindicator  : indicator
rindicator  : indicator 
indicator   : det 
            | pc
det         : "{" char ( _sep char )* "}"
pc          : "<" char ( _sep char )* ">"

char        : VALUE signspec?       -> value
            | signt signspec?       -> sign
            | PATTERN signspec?     -> pattern
            | _SIGNX                -> signx
            | X signspec?           -> valuex
            | _N                    -> n
signspec    : "(" signt ( "." signt )* ")"

_sep        : ( _SPACE | _break )+ 
            | ( _SPACE | _break )* ellipsis ( _SPACE | _break )*
            | _SPACE? colon _SPACE?
            | ( ellipsis | colon )? con 
            | con ( ellipsis | colon ) con?
            | bar
_nullsep    : _break+ 
            | _break* ellipsis _break*
            | colon

startbreak  : _break
endbreak    : _break

_break      : wordbreak 
            | linebreak

con         : _CON
ellipsis    : _ELLIPSIS
colon       : ":"
wordbreak   : ";"
linebreak   : _NL
bar         : "|"

signt       : SIMPLESIGN MOD* ( ( SIGNCON | xcon ) ( signt | parensignt ) )*
            | parensignt MOD+ ( ( SIGNCON | xcon ) ( signt | parensignt ) )*
            | parensignt ( ( SIGNCON | xcon ) ( signt | parensignt ) )+
parensignt  : "(" signt ( "." signt )* ")"
xcon        : X

PATTERN.5   : /\/[^\/]*\//
VALUE.3     : /[abdegĝhḫijklmnpqrsšṣtṭuwyz’]+[0-9xX]*/
SIMPLESIGN.3: /[ABDEGĜHḪIJKLMNPQRSŠṢTṬUWYZ’]+[0-9]*/
_SIGNX.2    : "X"
X.2         : "x"
_N.2        : /[Nn]/
_ELLIPSIS.2 : "…"|"..."
_CON.1      : /[.-]/
_SPACE      : /[\t \f\n]+/
_NL         : "//"
MOD         : "@" ( /[tgšnkzicdfvabx]/ | "90" | "45" )
SIGNCON     : /[×%&@]/